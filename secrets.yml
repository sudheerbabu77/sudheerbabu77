# Store and deploy secrets

# Kubernetes Secrets are secure objects which store sensitive data, such as passwords
# and OAuth tokens, and SSH keys, etc. with encryption in your clusters
# Secrets gives you more flexibility in a Pod Life cycle definition and control over how sensitive data is used
# --It reduces the risk of exposing the data
# --Secrets are namespaced objects
# --Secret data is stored in tmpfs in nodes
# --API server stores secrets as plain text in etcd
# --A per-secret size limit of 1MB

# creating secrets using yaml file

# --- 
# apiVersion: v1
# data: 
#   password: TXEyRCMoOGdmMDk=
#   username: cm9vdA==
# kind: Secret
# metadata: 
#   name: database-creds
# type: Opaque
 
# $ kubectl create -f creds.yaml 
# $ kubectl get secret/database-creds

# Usage of Secrets
# A Secret can be used with your workloads in two ways:
# 1.specify environment variables that reference the Secretâ€™s values
# 2.mount a volume containing the Secret.

# 1.environment variables

# --- 
# apiVersion: v1
# kind: Pod
# metadata: 
#   name: php-mysql-app
# spec: 
#   containers: 
#     - 
#       env: 
#         - 
#           name: MYSQL_USER
#           valueFrom: 
#             secretKeyRef: 
#               key: username
#               name: database-creds
#         - 
#           name: MYSQL_PASSWORD
#           valueFrom: 
#             secretKeyRef: 
#               key: password
#               name: database-creds
#       image: "php:latest"
#       name: php-app

# 2.secret as volume

# --- 
# apiVersion: v1
# kind: Pod
# metadata: 
#   name: redis-pod
# spec: 
#   containers: 
#     - 
#       image: redis
#       name: redis-pod
#       volumeMounts: 
#         - 
#           mountPath: /etc/dbcreds
#           name: dbcreds
#           readOnly: true
#   volumes: 
#     - 
#       name: dbcreds
#       secret: 
#         secretName: database-creds	


# the sensitive data stored in secrets by using volumes and variables 